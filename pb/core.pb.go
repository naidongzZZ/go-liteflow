// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0--rc3
// source: pb/core.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// operator type
type OpType int32

const (
	OpType_OpUnknown   OpType = 0
	OpType_Map         OpType = 1
	OpType_Reduce      OpType = 2
	OpType_KeyBy       OpType = 3
	OpType_KeyByReduce OpType = 4
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "OpUnknown",
		1: "Map",
		2: "Reduce",
		3: "KeyBy",
		4: "KeyByReduce",
	}
	OpType_value = map[string]int32{
		"OpUnknown":   0,
		"Map":         1,
		"Reduce":      2,
		"KeyBy":       3,
		"KeyByReduce": 4,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[0].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[0]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{0}
}

// task status
type TaskStatus int32

const (
	TaskStatus_TsUnknown TaskStatus = 0
	TaskStatus_Ready     TaskStatus = 1
	TaskStatus_Deployed  TaskStatus = 2
	TaskStatus_Running   TaskStatus = 3
	TaskStatus_Done      TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TsUnknown",
		1: "Ready",
		2: "Deployed",
		3: "Running",
		4: "Done",
	}
	TaskStatus_value = map[string]int32{
		"TsUnknown": 0,
		"Ready":     1,
		"Deployed":  2,
		"Running":   3,
		"Done":      4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{1}
}

// event type
type EventType int32

const (
	EventType_EtUnknown EventType = 0
	EventType_Output    EventType = 1
	EventType_Notify    EventType = 2
	EventType_ACK       EventType = 3
	EventType_Input     EventType = 4
	EventType_NoData    EventType = 5
	EventType_Establish EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EtUnknown",
		1: "Output",
		2: "Notify",
		3: "ACK",
		4: "Input",
		5: "NoData",
		6: "Establish",
	}
	EventType_value = map[string]int32{
		"EtUnknown": 0,
		"Output":    1,
		"Notify":    2,
		"ACK":       3,
		"Input":     4,
		"NoData":    5,
		"Establish": 6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{2}
}

// task manager's status or coordinator's status
type ServiceStatus int32

const (
	ServiceStatus_SsUnknown ServiceStatus = 0
	ServiceStatus_SsReady   ServiceStatus = 1
	ServiceStatus_SsRunning ServiceStatus = 2
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SsUnknown",
		1: "SsReady",
		2: "SsRunning",
	}
	ServiceStatus_value = map[string]int32{
		"SsUnknown": 0,
		"SsReady":   1,
		"SsRunning": 2,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[3].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[3]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{3}
}

type ServiceType int32

const (
	ServiceType_StUnknown   ServiceType = 0
	ServiceType_Coordinator ServiceType = 1
	ServiceType_TaskManager ServiceType = 2
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "StUnknown",
		1: "Coordinator",
		2: "TaskManager",
	}
	ServiceType_value = map[string]int32{
		"StUnknown":   0,
		"Coordinator": 1,
		"TaskManager": 2,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[4].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[4]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{4}
}

type ManageType int32

const (
	ManageType_MtUnknown ManageType = 0
	ManageType_Start     ManageType = 1
	ManageType_Interrupt ManageType = 2
	ManageType_Stop      ManageType = 3
)

// Enum value maps for ManageType.
var (
	ManageType_name = map[int32]string{
		0: "MtUnknown",
		1: "Start",
		2: "Interrupt",
		3: "Stop",
	}
	ManageType_value = map[string]int32{
		"MtUnknown": 0,
		"Start":     1,
		"Interrupt": 2,
		"Stop":      3,
	}
)

func (x ManageType) Enum() *ManageType {
	p := new(ManageType)
	*p = x
	return p
}

func (x ManageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_core_proto_enumTypes[5].Descriptor()
}

func (ManageType) Type() protoreflect.EnumType {
	return &file_pb_core_proto_enumTypes[5]
}

func (x ManageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManageType.Descriptor instead.
func (ManageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{5}
}

// directed graph 有向任务图
type Digraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// graph task id
	GraphId string `protobuf:"bytes,1,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	// tasks
	Adj []*OperatorTask `protobuf:"bytes,2,rep,name=adj,proto3" json:"adj,omitempty"`
	// 可执行文件hash
	EfHash string `protobuf:"bytes,3,opt,name=ef_hash,json=efHash,proto3" json:"ef_hash,omitempty"`
}

func (x *Digraph) Reset() {
	*x = Digraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digraph) ProtoMessage() {}

func (x *Digraph) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digraph.ProtoReflect.Descriptor instead.
func (*Digraph) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{0}
}

func (x *Digraph) GetGraphId() string {
	if x != nil {
		return x.GraphId
	}
	return ""
}

func (x *Digraph) GetAdj() []*OperatorTask {
	if x != nil {
		return x.Adj
	}
	return nil
}

func (x *Digraph) GetEfHash() string {
	if x != nil {
		return x.EfHash
	}
	return ""
}

type OperatorTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task identity
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// client identity
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// operator type
	OpType OpType `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=pb.OpType" json:"op_type,omitempty"`
	// operator identity
	// string op_id = 4;
	// task manager identity
	TaskManagerId string `protobuf:"bytes,5,opt,name=task_manager_id,json=taskManagerId,proto3" json:"task_manager_id,omitempty"`
	// task status
	State TaskStatus `protobuf:"varint,6,opt,name=state,proto3,enum=pb.TaskStatus" json:"state,omitempty"`
	// many instances are executed in parallel
	Parallelism int32 `protobuf:"varint,7,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	// upstream task
	Upstream []*OperatorTask `protobuf:"bytes,8,rep,name=upstream,proto3" json:"upstream,omitempty"`
	// downstream task
	Downstream []*OperatorTask `protobuf:"bytes,9,rep,name=downstream,proto3" json:"downstream,omitempty"`
}

func (x *OperatorTask) Reset() {
	*x = OperatorTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorTask) ProtoMessage() {}

func (x *OperatorTask) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorTask.ProtoReflect.Descriptor instead.
func (*OperatorTask) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatorTask) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OperatorTask) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType_OpUnknown
}

func (x *OperatorTask) GetTaskManagerId() string {
	if x != nil {
		return x.TaskManagerId
	}
	return ""
}

func (x *OperatorTask) GetState() TaskStatus {
	if x != nil {
		return x.State
	}
	return TaskStatus_TsUnknown
}

func (x *OperatorTask) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *OperatorTask) GetUpstream() []*OperatorTask {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *OperatorTask) GetDownstream() []*OperatorTask {
	if x != nil {
		return x.Downstream
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// occurrence time
	EventTime int64 `protobuf:"varint,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// event type
	EventType EventType `protobuf:"varint,3,opt,name=eventType,proto3,enum=pb.EventType" json:"eventType,omitempty"`
	// event data
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// event key
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// task manager ids
	TaskManagerId string `protobuf:"bytes,6,opt,name=task_manager_id,json=taskManagerId,proto3" json:"task_manager_id,omitempty"`
	// task id
	TaskId string `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// output task manager id
	OutputTaskManagerId string `protobuf:"bytes,8,opt,name=output_task_manager_id,json=outputTaskManagerId,proto3" json:"output_task_manager_id,omitempty"`
	// output task id
	OutputTaskId string `protobuf:"bytes,9,opt,name=output_task_id,json=outputTaskId,proto3" json:"output_task_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *Event) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EtUnknown
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Event) GetTaskManagerId() string {
	if x != nil {
		return x.TaskManagerId
	}
	return ""
}

func (x *Event) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Event) GetOutputTaskManagerId() string {
	if x != nil {
		return x.OutputTaskManagerId
	}
	return ""
}

func (x *Event) GetOutputTaskId() string {
	if x != nil {
		return x.OutputTaskId
	}
	return ""
}

type EmitEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmitEventResp) Reset() {
	*x = EmitEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmitEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitEventResp) ProtoMessage() {}

func (x *EmitEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitEventResp.ProtoReflect.Descriptor instead.
func (*EmitEventResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{3}
}

// 服务信息
type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // 服务id
	ServiceType   ServiceType   `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3,enum=pb.ServiceType" json:"service_type,omitempty"`         // 服务类型
	ServiceStatus ServiceStatus `protobuf:"varint,3,opt,name=service_status,json=serviceStatus,proto3,enum=pb.ServiceStatus" json:"service_status,omitempty"` // 服务状态
	ServiceAddr   string        `protobuf:"bytes,4,opt,name=service_addr,json=serviceAddr,proto3" json:"service_addr,omitempty"`                              // 服务地址
	Timestamp     int64         `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                    // 时间戳
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceInfo) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_StUnknown
}

func (x *ServiceInfo) GetServiceStatus() ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return ServiceStatus_SsUnknown
}

func (x *ServiceInfo) GetServiceAddr() string {
	if x != nil {
		return x.ServiceAddr
	}
	return ""
}

func (x *ServiceInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 心跳请求
type HeartBeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInfo *ServiceInfo `protobuf:"bytes,1,opt,name=service_info,json=serviceInfo,proto3" json:"service_info,omitempty"`
}

func (x *HeartBeatReq) Reset() {
	*x = HeartBeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatReq) ProtoMessage() {}

func (x *HeartBeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatReq.ProtoReflect.Descriptor instead.
func (*HeartBeatReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{5}
}

func (x *HeartBeatReq) GetServiceInfo() *ServiceInfo {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

// 心跳响应
type HeartBeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInfos map[string]*ServiceInfo `protobuf:"bytes,1,rep,name=service_infos,json=serviceInfos,proto3" json:"service_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeartBeatResp) Reset() {
	*x = HeartBeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResp) ProtoMessage() {}

func (x *HeartBeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResp.ProtoReflect.Descriptor instead.
func (*HeartBeatResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{6}
}

func (x *HeartBeatResp) GetServiceInfos() map[string]*ServiceInfo {
	if x != nil {
		return x.ServiceInfos
	}
	return nil
}

// 提交任务请求
type SubmitOpTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务拓扑
	Digraph *Digraph `protobuf:"bytes,1,opt,name=digraph,proto3" json:"digraph,omitempty"`
	// 客户端id
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// 可执行文件
	Ef []byte `protobuf:"bytes,3,opt,name=ef,proto3" json:"ef,omitempty"`
}

func (x *SubmitOpTaskReq) Reset() {
	*x = SubmitOpTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOpTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOpTaskReq) ProtoMessage() {}

func (x *SubmitOpTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOpTaskReq.ProtoReflect.Descriptor instead.
func (*SubmitOpTaskReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitOpTaskReq) GetDigraph() *Digraph {
	if x != nil {
		return x.Digraph
	}
	return nil
}

func (x *SubmitOpTaskReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubmitOpTaskReq) GetEf() []byte {
	if x != nil {
		return x.Ef
	}
	return nil
}

// 提交任务响应
type SubmitOpTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitOpTaskResp) Reset() {
	*x = SubmitOpTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOpTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOpTaskResp) ProtoMessage() {}

func (x *SubmitOpTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOpTaskResp.ProtoReflect.Descriptor instead.
func (*SubmitOpTaskResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{8}
}

// 部署任务请求
type DeployOpTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use for download executable file
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// task graph and task info
	Digraph *Digraph `protobuf:"bytes,2,opt,name=digraph,proto3" json:"digraph,omitempty"`
	// need deploy task
	// repeated string op_task_ids = 3;
	// 可执行文件hash
	EfHash string `protobuf:"bytes,3,opt,name=ef_hash,json=efHash,proto3" json:"ef_hash,omitempty"`
	// 可执行文件
	Ef []byte `protobuf:"bytes,4,opt,name=ef,proto3" json:"ef,omitempty"`
}

func (x *DeployOpTaskReq) Reset() {
	*x = DeployOpTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployOpTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployOpTaskReq) ProtoMessage() {}

func (x *DeployOpTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployOpTaskReq.ProtoReflect.Descriptor instead.
func (*DeployOpTaskReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{9}
}

func (x *DeployOpTaskReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DeployOpTaskReq) GetDigraph() *Digraph {
	if x != nil {
		return x.Digraph
	}
	return nil
}

func (x *DeployOpTaskReq) GetEfHash() string {
	if x != nil {
		return x.EfHash
	}
	return ""
}

func (x *DeployOpTaskReq) GetEf() []byte {
	if x != nil {
		return x.Ef
	}
	return nil
}

type DeployOpTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeployOpTaskResp) Reset() {
	*x = DeployOpTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployOpTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployOpTaskResp) ProtoMessage() {}

func (x *DeployOpTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployOpTaskResp.ProtoReflect.Descriptor instead.
func (*DeployOpTaskResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{10}
}

type ManageOpTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specified task id
	OpTaskIds []string `protobuf:"bytes,1,rep,name=op_task_ids,json=opTaskIds,proto3" json:"op_task_ids,omitempty"`
	// start or stop
	ManageType ManageType `protobuf:"varint,2,opt,name=manage_type,json=manageType,proto3,enum=pb.ManageType" json:"manage_type,omitempty"`
}

func (x *ManageOpTaskReq) Reset() {
	*x = ManageOpTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageOpTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageOpTaskReq) ProtoMessage() {}

func (x *ManageOpTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageOpTaskReq.ProtoReflect.Descriptor instead.
func (*ManageOpTaskReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{11}
}

func (x *ManageOpTaskReq) GetOpTaskIds() []string {
	if x != nil {
		return x.OpTaskIds
	}
	return nil
}

func (x *ManageOpTaskReq) GetManageType() ManageType {
	if x != nil {
		return x.ManageType
	}
	return ManageType_MtUnknown
}

type ManageOpTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManageOpTaskResp) Reset() {
	*x = ManageOpTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageOpTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageOpTaskResp) ProtoMessage() {}

func (x *ManageOpTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageOpTaskResp.ProtoReflect.Descriptor instead.
func (*ManageOpTaskResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{12}
}

type ReportOpTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpTaskId     string     `protobuf:"bytes,1,opt,name=op_task_id,json=opTaskId,proto3" json:"op_task_id,omitempty"`
	OpTaskStatus TaskStatus `protobuf:"varint,2,opt,name=op_task_status,json=opTaskStatus,proto3,enum=pb.TaskStatus" json:"op_task_status,omitempty"`
	ClientId     string     `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ReportOpTaskReq) Reset() {
	*x = ReportOpTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportOpTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportOpTaskReq) ProtoMessage() {}

func (x *ReportOpTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportOpTaskReq.ProtoReflect.Descriptor instead.
func (*ReportOpTaskReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{13}
}

func (x *ReportOpTaskReq) GetOpTaskId() string {
	if x != nil {
		return x.OpTaskId
	}
	return ""
}

func (x *ReportOpTaskReq) GetOpTaskStatus() TaskStatus {
	if x != nil {
		return x.OpTaskStatus
	}
	return TaskStatus_TsUnknown
}

func (x *ReportOpTaskReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type ReportOpTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskManagerId string `protobuf:"bytes,1,opt,name=task_manager_id,json=taskManagerId,proto3" json:"task_manager_id,omitempty"`
}

func (x *ReportOpTaskResp) Reset() {
	*x = ReportOpTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportOpTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportOpTaskResp) ProtoMessage() {}

func (x *ReportOpTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportOpTaskResp.ProtoReflect.Descriptor instead.
func (*ReportOpTaskResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{14}
}

func (x *ReportOpTaskResp) GetTaskManagerId() string {
	if x != nil {
		return x.TaskManagerId
	}
	return ""
}

type DownloadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	EfHash   string `protobuf:"bytes,2,opt,name=ef_hash,json=efHash,proto3" json:"ef_hash,omitempty"`
}

func (x *DownloadReq) Reset() {
	*x = DownloadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReq) ProtoMessage() {}

func (x *DownloadReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReq.ProtoReflect.Descriptor instead.
func (*DownloadReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{15}
}

func (x *DownloadReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DownloadReq) GetEfHash() string {
	if x != nil {
		return x.EfHash
	}
	return ""
}

type DownloadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileBytes []byte `protobuf:"bytes,1,opt,name=file_bytes,json=fileBytes,proto3" json:"file_bytes,omitempty"`
}

func (x *DownloadResp) Reset() {
	*x = DownloadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResp) ProtoMessage() {}

func (x *DownloadResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResp.ProtoReflect.Descriptor instead.
func (*DownloadResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{16}
}

func (x *DownloadResp) GetFileBytes() []byte {
	if x != nil {
		return x.FileBytes
	}
	return nil
}

type FindOpTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	OpTaskId string `protobuf:"bytes,2,opt,name=op_task_id,json=opTaskId,proto3" json:"op_task_id,omitempty"`
}

func (x *FindOpTaskReq) Reset() {
	*x = FindOpTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOpTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOpTaskReq) ProtoMessage() {}

func (x *FindOpTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOpTaskReq.ProtoReflect.Descriptor instead.
func (*FindOpTaskReq) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{17}
}

func (x *FindOpTaskReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FindOpTaskReq) GetOpTaskId() string {
	if x != nil {
		return x.OpTaskId
	}
	return ""
}

type FindOpTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskManagerId string `protobuf:"bytes,1,opt,name=task_manager_id,json=taskManagerId,proto3" json:"task_manager_id,omitempty"`
}

func (x *FindOpTaskResp) Reset() {
	*x = FindOpTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOpTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOpTaskResp) ProtoMessage() {}

func (x *FindOpTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOpTaskResp.ProtoReflect.Descriptor instead.
func (*FindOpTaskResp) Descriptor() ([]byte, []int) {
	return file_pb_core_proto_rawDescGZIP(), []int{18}
}

func (x *FindOpTaskResp) GetTaskManagerId() string {
	if x != nil {
		return x.TaskManagerId
	}
	return ""
}

var File_pb_core_proto protoreflect.FileDescriptor

var file_pb_core_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x61, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x64, 0x6a,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x03, 0x61, 0x64, 0x6a, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xa5, 0x02, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x42, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x1a, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x07, 0x64, 0x69, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x66, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7e,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x64, 0x69, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x07, 0x64, 0x69,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x66, 0x22, 0x12,
	0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x62, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0e,
	0x6f, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0b, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x66, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x2d, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x4a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0e, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x48, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x10, 0x04, 0x2a,
	0x4b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x74, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x06, 0x2a,
	0x3a, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0a, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x74, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x32, 0xd5, 0x02, 0x0a,
	0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0a, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_core_proto_rawDescOnce sync.Once
	file_pb_core_proto_rawDescData = file_pb_core_proto_rawDesc
)

func file_pb_core_proto_rawDescGZIP() []byte {
	file_pb_core_proto_rawDescOnce.Do(func() {
		file_pb_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_core_proto_rawDescData)
	})
	return file_pb_core_proto_rawDescData
}

var file_pb_core_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pb_core_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_pb_core_proto_goTypes = []interface{}{
	(OpType)(0),              // 0: pb.OpType
	(TaskStatus)(0),          // 1: pb.TaskStatus
	(EventType)(0),           // 2: pb.EventType
	(ServiceStatus)(0),       // 3: pb.ServiceStatus
	(ServiceType)(0),         // 4: pb.ServiceType
	(ManageType)(0),          // 5: pb.ManageType
	(*Digraph)(nil),          // 6: pb.Digraph
	(*OperatorTask)(nil),     // 7: pb.OperatorTask
	(*Event)(nil),            // 8: pb.Event
	(*EmitEventResp)(nil),    // 9: pb.EmitEventResp
	(*ServiceInfo)(nil),      // 10: pb.ServiceInfo
	(*HeartBeatReq)(nil),     // 11: pb.HeartBeatReq
	(*HeartBeatResp)(nil),    // 12: pb.HeartBeatResp
	(*SubmitOpTaskReq)(nil),  // 13: pb.SubmitOpTaskReq
	(*SubmitOpTaskResp)(nil), // 14: pb.SubmitOpTaskResp
	(*DeployOpTaskReq)(nil),  // 15: pb.DeployOpTaskReq
	(*DeployOpTaskResp)(nil), // 16: pb.DeployOpTaskResp
	(*ManageOpTaskReq)(nil),  // 17: pb.ManageOpTaskReq
	(*ManageOpTaskResp)(nil), // 18: pb.ManageOpTaskResp
	(*ReportOpTaskReq)(nil),  // 19: pb.ReportOpTaskReq
	(*ReportOpTaskResp)(nil), // 20: pb.ReportOpTaskResp
	(*DownloadReq)(nil),      // 21: pb.DownloadReq
	(*DownloadResp)(nil),     // 22: pb.DownloadResp
	(*FindOpTaskReq)(nil),    // 23: pb.FindOpTaskReq
	(*FindOpTaskResp)(nil),   // 24: pb.FindOpTaskResp
	nil,                      // 25: pb.HeartBeatResp.ServiceInfosEntry
}
var file_pb_core_proto_depIdxs = []int32{
	7,  // 0: pb.Digraph.adj:type_name -> pb.OperatorTask
	0,  // 1: pb.OperatorTask.op_type:type_name -> pb.OpType
	1,  // 2: pb.OperatorTask.state:type_name -> pb.TaskStatus
	7,  // 3: pb.OperatorTask.upstream:type_name -> pb.OperatorTask
	7,  // 4: pb.OperatorTask.downstream:type_name -> pb.OperatorTask
	2,  // 5: pb.Event.eventType:type_name -> pb.EventType
	4,  // 6: pb.ServiceInfo.service_type:type_name -> pb.ServiceType
	3,  // 7: pb.ServiceInfo.service_status:type_name -> pb.ServiceStatus
	10, // 8: pb.HeartBeatReq.service_info:type_name -> pb.ServiceInfo
	25, // 9: pb.HeartBeatResp.service_infos:type_name -> pb.HeartBeatResp.ServiceInfosEntry
	6,  // 10: pb.SubmitOpTaskReq.digraph:type_name -> pb.Digraph
	6,  // 11: pb.DeployOpTaskReq.digraph:type_name -> pb.Digraph
	5,  // 12: pb.ManageOpTaskReq.manage_type:type_name -> pb.ManageType
	1,  // 13: pb.ReportOpTaskReq.op_task_status:type_name -> pb.TaskStatus
	10, // 14: pb.HeartBeatResp.ServiceInfosEntry.value:type_name -> pb.ServiceInfo
	8,  // 15: pb.core.EmitEvent:input_type -> pb.Event
	11, // 16: pb.core.HeartBeat:input_type -> pb.HeartBeatReq
	13, // 17: pb.core.SubmitOpTask:input_type -> pb.SubmitOpTaskReq
	15, // 18: pb.core.DeployOpTask:input_type -> pb.DeployOpTaskReq
	19, // 19: pb.core.ReportOpTask:input_type -> pb.ReportOpTaskReq
	23, // 20: pb.core.FindOpTask:input_type -> pb.FindOpTaskReq
	9,  // 21: pb.core.EmitEvent:output_type -> pb.EmitEventResp
	12, // 22: pb.core.HeartBeat:output_type -> pb.HeartBeatResp
	14, // 23: pb.core.SubmitOpTask:output_type -> pb.SubmitOpTaskResp
	16, // 24: pb.core.DeployOpTask:output_type -> pb.DeployOpTaskResp
	20, // 25: pb.core.ReportOpTask:output_type -> pb.ReportOpTaskResp
	24, // 26: pb.core.FindOpTask:output_type -> pb.FindOpTaskResp
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pb_core_proto_init() }
func file_pb_core_proto_init() {
	if File_pb_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmitEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOpTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOpTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployOpTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployOpTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageOpTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageOpTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportOpTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportOpTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOpTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOpTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_core_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_core_proto_goTypes,
		DependencyIndexes: file_pb_core_proto_depIdxs,
		EnumInfos:         file_pb_core_proto_enumTypes,
		MessageInfos:      file_pb_core_proto_msgTypes,
	}.Build()
	File_pb_core_proto = out.File
	file_pb_core_proto_rawDesc = nil
	file_pb_core_proto_goTypes = nil
	file_pb_core_proto_depIdxs = nil
}
