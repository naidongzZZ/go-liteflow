syntax = "proto3";

package pb;

option go_package = ".";

service core {
  // Event channels between task managers
  rpc EventChannel(stream Event) returns (stream Event) {}
  // Deprecated: dont use
  rpc DirectedEventChannel(stream EventChannelReq) returns (EventChannelResp) {}
  // TODO raft
  // Send heart beat to coordinator or Ask if the coordinator is alive
  rpc SendHeartBeat(HeartBeatReq) returns (HeartBeatResp) {}
  // Submit tasks to the coordinator
  rpc SubmitOpTask(SubmitOpTaskReq) returns (SubmitOpTaskResp) {}
  // Deploy tasks to task manager
  rpc DeployOpTask(DeployOpTaskReq) returns (DeployOpTaskResp) {}
  // Manage tasks status
  rpc ManageOpTask(ManageOpTaskReq) returns (ManageOpTaskResp) {}
  // Report task's infomation to coordinator
  rpc ReportOpTask(ReportOpTaskReq) returns (ReportOpTaskResp) {}
  // Download executable file
  rpc DownloadOpTaskEF(DownloadReq) returns (stream DownloadResp) {}
  // Find task info
  rpc FindOpTask(FindOpTaskReq) returns (FindOpTaskResp) {}
}

// directed graph 有向任务图
message Digraph {
  // graph task id
  string graph_id = 1;
  // tasks
  repeated OperatorTask adj = 2;
  // 可执行文件hash
  string ef_hash = 3;
}

// operator type
enum OpType {
  OpUnknown = 0;
  Map = 1;
  Reduce = 2;
  KeyBy = 3;
  KeyByReduce = 4;
}

// task status
enum TaskStatus {
  TsUnknown = 0;
  Ready = 1;
  Deployed = 2;
  Running = 3;
  Done = 4;
}

message OperatorTask {
  // task identity
  string id = 1;
  // client identity
  string client_id = 2;
  // operator type
  OpType op_type = 3;
  // operator identity
  string op_id = 4;
  // task manager identity
  string task_manager_id = 5;
  // task status
  TaskStatus state = 6;
  // many instances are executed in parallel
  int32 parallelism = 7;
  // upstream task
  repeated OperatorTask upstream = 8;
  // downstream task
  repeated OperatorTask downstream = 9;
}

// event type
enum EventType {
  EtUnknown = 0;
  DataOutPut = 1;
  Notify = 2;
  ACK = 3;
  DataSent = 4;
}

message Event {
  string id = 1;
  // occurrence time
  int64 event_time = 2;
  // source task
  string source_op_task_id = 3;
  // target task
  string target_op_task_id = 4;
  // event type
  EventType eventType = 5;
  // event data
  bytes data = 6;
  // event key 
  string key = 7;
}

message EventChannelReq { repeated Event events = 1; }

message EventChannelResp { map<string, string> ctrl_info = 1; }

// task manager's status or coordinator's status
enum ServiceStatus {
  SsUnknown = 0;
  SsReady = 1;
  SsRunning = 2;
}

enum ServiceType {
  StUnknown = 0;
  Coordinator = 1;
  TaskManager = 2;
}

// 服务信息
message ServiceInfo {
  string id = 1; // 服务id
  ServiceType service_type = 2; // 服务类型
  ServiceStatus service_status = 3; // 服务状态
  string service_addr = 4; // 服务地址
  int64 timestamp = 5; // 时间戳
}

// 心跳请求
message HeartBeatReq { ServiceInfo service_info = 1; }

// 心跳响应
message HeartBeatResp { map<string, ServiceInfo> service_infos = 1; }

// 提交任务请求
message SubmitOpTaskReq {
  // 任务拓扑
  Digraph digraph = 1;
  // 客户端id
  string client_id = 2;
  // 可执行文件
  bytes ef = 3;
  // 可执行文件的hash
  string ef_hash = 4;
}

// 提交任务响应
message SubmitOpTaskResp {}

// 部署任务请求
message DeployOpTaskReq {
  // use for download executable file
  string client_id = 1;
  // task graph and task info
  Digraph digraph = 2;
  // need deploy task
  repeated string op_task_ids = 3;
}

message DeployOpTaskResp {}

enum ManageType {
  MtUnknown = 0;
  Start = 1;
  Interrupt = 2;
  Stop = 3;
}

message ManageOpTaskReq {
  // specified task id
  repeated string op_task_ids = 1;
  // start or stop
  ManageType manage_type = 2;
}

message ManageOpTaskResp {}

message ReportOpTaskReq {
  string op_task_id = 1;
  TaskStatus op_task_status = 2;
  string client_id = 3;
}

message ReportOpTaskResp {
  string task_manager_id = 1;
}

message DownloadReq { string client_id = 1; }

message DownloadResp { bytes file_bytes = 1; }

message FindOpTaskReq {
  string client_id = 1;
  string op_task_id = 2;
}

message FindOpTaskResp {
  string task_manager_id = 1;
}