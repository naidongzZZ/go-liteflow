syntax = "proto3";

package pb;

option go_package = ".";

service core {
  // Event channels between task managers
  rpc EventChannel(stream Event) returns (stream Event) {}
  // todo raft
  // Send heart beat to coordinator or Ask if the coordinator is alive
  rpc SendHeartBeat(HeartBeatReq) returns (HeartBeatResp) {}
  // Submit tasks to the coordinator
  rpc SubmitOpTask(SubmitOpTaskReq) returns (SubmitOpTaskResp) {}
  // Deploy tasks to task manager
  rpc DeployOpTask(DeployOpTaskReq) returns (DeployOpTaskResp) {}
  // Manage tasks status
  rpc ManageOpTask(ManageOpTaskReq) returns (ManageOpTaskResp) {}
  // Report task's infomation to coordinator
  rpc ReportOpTask(ReportOpTaskReq) returns (ReportOpTaskResp) {}
  // Download executable file
  rpc DownloadOpTaskEF(DownloadReq) returns (stream DownloadResp) {}
}

// directed graph
message Digraph {
  // graph task id
  string graph_id = 1;
  // tasks
  repeated OperatorTask adj = 2;
}

// operator type
enum OpType {
  OpUnknown = 0;
  Map = 1;
  Reduce = 2;
  KeyBy = 3;
}

// task status
enum TaskStatus {
  TsUnknown = 0;
  Ready = 1;
  Running = 2;
}

message OperatorTask {
  // task identity
  string id = 1;
  // client identity
  string client_id = 2;
  // operator type
  OpType op_type = 3;
  // operator identity
  string op_id = 4;
  // task manager identity
  string task_manager_id = 5;
  // task status
  TaskStatus state = 6;
  // many instances are executed in parallel
  int32 parallelism = 7;
  // upstream task
  repeated OperatorTask upstream = 8;
  // downstream task
  repeated OperatorTask downstream = 9;
}

// event type
enum EventType {
  DataOutPut = 0;
  Notify = 1;
  ACK = 2;
}

message Event {
  string id = 1;
  // occurrence time
  int64 event_time = 2;
  // source task
  string source_op_task_id = 3;
  // target task
  string target_op_task_id = 4;
  // event type
  EventType eventType = 5;
  // event data
  bytes data = 6;
}

message EventChannelReq { repeated Event events = 1; }

message EventChannelResp {
  map<string, string> ctrl_info = 1;
}

// task manager's status or coordinator's status
enum ServiceStatus {
  SsUnknown = 0;
  SsReady = 1;
  SsRunning = 2;
}

enum ServiceType {
   StUnknown = 0;
   Coordinator = 1;
   TaskManager = 2;
}

message ServiceInfo {
  string id = 1;
  ServiceType service_type = 2;
  ServiceStatus service_status = 3;
  string service_addr = 4;
}

message HeartBeatReq {
  ServiceInfo service_info = 1;
}

message HeartBeatResp { map<string, ServiceInfo> service_infos = 1; }

message SubmitOpTaskReq {
  Digraph digraph = 1;
  string client_id = 2;
}

message SubmitOpTaskResp {}

message DeployOpTaskReq {
  // use for download executable file
  string client_id = 1;
  // task graph and task info
  Digraph digraph = 2;
  // need deploy task
  repeated string op_task_ids = 3;
}

message DeployOpTaskResp {}

enum ManageType {
  MtUnknown = 0;
  Start = 1;
  Interrupt = 2;
  Stop = 3;
}

message ManageOpTaskReq {
  // specified task id
  repeated string op_task_ids = 1;
  // start or stop
  ManageType manage_type = 2;
}

message ManageOpTaskResp {}

message ReportOpTaskReq {
  string op_task_id = 1;
  TaskStatus op_task_status = 2;
}

message ReportOpTaskResp {}

message DownloadReq { string client_id = 1; }

message DownloadResp { bytes file_bytes = 1; }