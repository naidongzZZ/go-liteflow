// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/core.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	EventChannel(ctx context.Context, opts ...grpc.CallOption) (Core_EventChannelClient, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) EventChannel(ctx context.Context, opts ...grpc.CallOption) (Core_EventChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Core_ServiceDesc.Streams[0], "/pb.core/EventChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreEventChannelClient{stream}
	return x, nil
}

type Core_EventChannelClient interface {
	Send(*EventChannelReq) error
	Recv() (*EventChannelResp, error)
	grpc.ClientStream
}

type coreEventChannelClient struct {
	grpc.ClientStream
}

func (x *coreEventChannelClient) Send(m *EventChannelReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreEventChannelClient) Recv() (*EventChannelResp, error) {
	m := new(EventChannelResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	EventChannel(Core_EventChannelServer) error
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) EventChannel(Core_EventChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventChannel not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_EventChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServer).EventChannel(&coreEventChannelServer{stream})
}

type Core_EventChannelServer interface {
	Send(*EventChannelResp) error
	Recv() (*EventChannelReq, error)
	grpc.ServerStream
}

type coreEventChannelServer struct {
	grpc.ServerStream
}

func (x *coreEventChannelServer) Send(m *EventChannelResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreEventChannelServer) Recv() (*EventChannelReq, error) {
	m := new(EventChannelReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.core",
	HandlerType: (*CoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventChannel",
			Handler:       _Core_EventChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/core.proto",
}
